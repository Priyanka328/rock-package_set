diff --git CMakeLists.txt CMakeLists.txt
new file mode 100644
index 000000000..1b1f70b22
--- /dev/null
+++ CMakeLists.txt
@@ -0,0 +1,44 @@
+cmake_minimum_required(VERSION 3.10)
+
+find_package(Rock)
+project(fast_downward 
+    VERSION 0.1
+    DESCRIPTION "Fast Downward - a domain-independent classical planning system"
+)
+
+rock_init()
+
+if(PYTHON_EXECTUABLE)
+    set(PYTHON ${PYTHON_EXECTUABLE})
+    message(STATUS "Using python: ${PYTHON_EXECTUABLE}")
+elseif("$ENV{PYTHON}" STREQUAL "")
+    set(PYTHON "python3")
+    message(STATUS "Using default python.")
+else()
+    set(PYTHON $ENV{PYTHON})
+    message(STATUS ${PYTHON})
+endif()
+
+execute_process(
+COMMAND ${PYTHON} -c "import sys;print(sys.version_info.major)"
+OUTPUT_VARIABLE PYTHON_VERSION
+)
+string(STRIP ${PYTHON_VERSION} PYTHON_VERSION)
+message(STATUS "Python version: ${PYTHON_VERSION}")
+
+
+set(SETUP_PY "${CMAKE_CURRENT_SOURCE_DIR}/setup.py")
+
+# Custom python target that runs 'setup.py build' to build all python
+# components.
+add_custom_target(python_setup ALL
+    COMMAND ${PYTHON} ${SETUP_PY} build
+    WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
+)
+
+
+install(
+  CODE "execute_process(
+    COMMAND ${PYTHON} ${SETUP_PY} install --prefix=${CMAKE_INSTALL_PREFIX}
+    WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR})"
+)
diff --git driver/portfolios/__init__.py driver/portfolios/__init__.py
new file mode 100644
index 000000000..e69de29bb
diff --git fast_downward-planner fast_downward-planner
new file mode 100755
index 000000000..849f9ac49
--- /dev/null
+++ fast_downward-planner
@@ -0,0 +1,8 @@
+#!/bin/bash
+
+if [ $# -ne 3 ] || [ "$1" = "--help" ] || [ "$1" = "-h" ]; then
+    echo "Usage: plan <domain_file> <problem_file> <result_file>"
+    exit 0
+fi
+
+python fast-downward.py --plan-file $3 $1 $2
diff --git manifest.xml manifest.xml
new file mode 100644
index 000000000..fdd29345e
--- /dev/null
+++ manifest.xml
@@ -0,0 +1,18 @@
+<package>
+    <name>fast_downward</name>
+    <description brief="fast_downward planner">
+        Fast Downward - a domain-independent classical planning system
+    </description>
+    <author>Malte Helmert/malte.helmert@unibas.ch</author>
+    <author>Silvia Richter/silvia.richter@nicta.com.au</author>
+    <author>Matthias Westphal/westpham@informatik.uni-freiburg.de</author>
+    <author>Erez Karpas/karpase@technion.ac.il</author>
+    <author>Michael Katz/michael.katz@ibm.com</author>
+    <license>GPL-3.0</license>
+    <url>https://github.com/aibasel/downward</url>
+    <depend package="base/cmake" />
+    <depend package="python3-setuptools" />
+    <keywords>
+        <keyword>planning</keyword>
+    </keywords>
+</package>
diff --git setup.py setup.py
new file mode 100644
index 000000000..fb6254061
--- /dev/null
+++ setup.py
@@ -0,0 +1,89 @@
+#!/usr/bin/env python3
+import os
+from os.path import abspath, basename, dirname, join, normpath, relpath, realpath
+import shutil
+
+from setuptools import setup, Command, glob, find_packages
+from setuptools.command.install import install as SetuptoolsInstall
+from distutils.command.build import build as DistutilsBuild
+
+
+here = normpath(abspath(dirname(__file__)))
+
+class BuildCommand(DistutilsBuild):
+    user_options = [('build-base',None, os.path.join(here, "build"))]
+
+    def initialize_options(self):
+        super().initialize_options()
+        pass
+
+    def finalize_options(self):
+        super().finalize_options()
+        self.distribution.build_base = os.path.join(here, "build")
+
+    def run(self):
+        print("Build")
+        translate_path = os.path.join(here,"translate")
+        if not os.path.exists(translate_path):
+            os.symlink(join(here,"builds/release/bin/translate"), translate_path)
+
+        os.system(os.path.join(here,"build.py"))
+        DistutilsBuild.run(self)
+
+class InstallCommand(SetuptoolsInstall):
+    def pre_install(self):
+        print("Pre install")
+
+    def post_install(self):
+        print(f"Post install {self.install_base}")
+        shutil.copy("builds/release/bin/downward",
+                os.path.join(self.install_base,"bin"))
+
+    def run(self):
+        self.pre_install()
+        SetuptoolsInstall.run(self)
+        self.post_install()
+
+
+class CleanCommand(Command):
+    """Custom clean command to tidy up the project root."""
+    CLEAN_FILES = './build ./builds ./translate ./dist ./*.egg-info'.split(' ')
+
+    user_options = []
+
+    def initialize_options(self):
+        pass
+
+    def finalize_options(self):
+        pass
+
+    def run(self):
+        global here
+
+        for path_spec in self.CLEAN_FILES:
+            # Make paths absolute and relative to this path
+            abs_paths = glob.glob(normpath(join(here, path_spec)))
+            for path in [str(p) for p in abs_paths]:
+                if not path.startswith(here):
+                    # Die if path in CLEAN_FILES is absolute + outside this directory
+                    raise ValueError("%s is not a path inside %s" % (path, here))
+                print('removing %s' % relpath(path))
+                if os.path.islink(path):
+                    os.remove(path)
+                else:
+                    shutil.rmtree(path)
+
+setup(name='fast_downward',
+      version='20.06',
+      description='Fast Downward - a domain-independent classical planning system',
+      author='Malte Helmert',
+      author_email='malte.helmert@unibas.ch',
+      url='https://github.com/aibasel/downward',
+      install_requires=[],
+      packages=["driver","driver.portfolios","translate", "translate.pddl", "translate.pddl_parser"],
+      scripts=["fast-downward.py","fast_downward-planner"],
+      cmdclass={
+        'build': BuildCommand,
+        'install': InstallCommand,
+        'cleanup': CleanCommand,
+        })
diff --git src/translate/__init__.py src/translate/__init__.py
new file mode 100644
index 000000000..e69de29bb
-- 
2.17.1

